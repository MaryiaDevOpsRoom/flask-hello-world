version: v2beta1
name: flask-hello-worldgit

hooks:
  - name: add-to-hosts
    command: echo "$(minikube ip) argocd.io" | sudo tee -a /etc/hosts
    events: ["before:deploy:ingress-config"]

# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  deploy:
    run: |-
      minikube start
      minikube addons enable ingress
      create_deployments argocd
      create_deployments ingress-config
      wait_pod --label-selector app.kubernetes.io/name=argocd-server --namespace argocd
      argocd login --username admin --password $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d) --insecure --grpc-web argocd.io
      kubectl config set-context --current --namespace=argocd
      argocd app create flask-hello-world --repo https://github.com/MaryiaDevOpsRoom/argocd.git --path . --dest-server https://kubernetes.default.svc --dest-namespace default
      argocd app sync flask-hello-world
      create_deployments argo-workflow
      #kubectl patch deployment argo-workflow-argo-workflows-server --namespace argo --type='json' -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/args", "value": ["server",--auth-mode=server"]}]'
      #kubectl -n argo port-forward deployment/argo-server 2746:2746
      create_deployments jenkins

  dev: 
    run: |-
      create_deployments jenkins


      
# This is a list of `deployments` that DevSpace can create for this project
deployments:
  argocd:
    helm:
      chart:
        git: https://github.com/argoproj/argo-helm
        subPath: ./charts/argo-cd
    namespace: argocd

  argo-workflow:
    helm:
      chart:
        git: https://github.com/argoproj/argo-helm/
        subPath: ./charts/argo-workflows
    namespace: argo

  jenkins:
    helm:
      chart: 
        name: jenkins
        repo: https://charts.jenkins.io
    namespace: jenkins

  ingress-config:
    kubectl:
      inlineManifest: |-
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: argocd-server-ingress
          namespace: argocd
          annotations:
            cert-manager.io/cluster-issuer: letsencrypt-prod
            nginx.ingress.kubernetes.io/ssl-passthrough: "true"
            # If you encounter a redirect loop or are getting a 307 response code
            # then you need to force the nginx ingress to connect to the backend using HTTPS.
            #
            nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        spec:
          ingressClassName: nginx
          rules:
          - host: argocd.io
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: argocd-server
                    port:
                      name: https
          tls:
          - hosts:
            - argocd.io
            secretName: argocd-server-tls # as expected by argocd-server
